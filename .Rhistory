?solve
## The following pair of functions compute and cace the
## inverse of a matrix. Considering that the supplied matrix
## is always invertible
## Creates a special "matrix" object that can cache its inverse
## Considering that the provided matrix is always invertible
makeCacheMatrix <- function(x = matrix()) {
m <- NULL
set <- function(y) {
x <<- 3y
m <<- NULL
}
get <- function() x
setinverse <- function(solve) m <<- solve
getinverse <- function() m
list(set = set, get = get,
setinverse = setinverse,
getinverse = getinverse)
}
## This function computes the inverse of the
## special "matrix" returned by makeCacheMatrix.
## If the inverse has already been calculated
##(and the matrix has not changed),
## then the cachesolve retrieves the result from the cache.
cacheSolve <- function(x, ...) {
## Returns a matrix that is the inverse of 'x'
m <- x$getinverse()
if(!is.null(m)) {
message("getting cached data")
return(m)
}
data <- x$get()
m <- solve(data, ...)
x$setsolve(m)
m
}
## The following pair of functions compute and cace the
## inverse of a matrix. Considering that the supplied matrix
## is always invertible
## Creates a special "matrix" object that can cache its inverse
## Considering that the provided matrix is always invertible
makeCacheMatrix <- function(x = matrix()) {
m <- NULL
set <- function(y) {
x <<- 3y
m <<- NULL
}
get <- function() x
setinverse <- function(solve) m <<- solve
getinverse <- function() m
list(set = set, get = get,
setinverse = setinverse,
getinverse = getinverse)
}
## This function computes the inverse of the
## special "matrix" returned by makeCacheMatrix.
## If the inverse has already been calculated
##(and the matrix has not changed),
## then the cachesolve retrieves the result from the cache.
cacheSolve <- function(x, ...) {
## Returns a matrix that is the inverse of 'x'
m <- x$getinverse()
if(!is.null(m)) {
message("getting cached data")
return(m)
}
data <- x$get()
m <- solve(data, ...)
x$setinverse(m)
m
}
mat <- matrix(data = c(4,2,7,6), nrow = 2, ncol = 2)
mat2 <- makeCacheMatrix(mat)
makeCacheMatrix <- function(x = matrix()) {
m <- NULL
set <- function(y) {
x <<- 3y
m <<- NULL
}
get <- function() x
setinverse <- function(solve) m <<- solve
getinverse <- function() m
list(set = set, get = get,
setinverse = setinverse,
getinverse = getinverse)
}
makeCacheMatrix <- function(x = matrix()) {
m <- NULL
set <- function(y) {
x <<- 3y
m <<- NULL
}
get <- function() x
setinverse <- function(solve)
m <<- solve
getinverse <- function() m
list(set = set, get = get,
setinverse = setinverse,
getinverse = getinverse)
}
makeCacheMatrix <- function(x = matrix()) {
m <- NULL
set <- function(y) {
x <<- y
m <<- NULL
}
get <- function() x
setinverse <- function(solve) m <<- solve
getinverse <- function() m
list(set = set, get = get,
setinverse = setinverse,
getinverse = getinverse)
}
cacheSolve <- function(x, ...) {
## Returns a matrix that is the inverse of 'x'
m <- x$getinverse()
if(!is.null(m)) {
message("getting cached data")
return(m)
}
data <- x$get()
m <- solve(data, ...)
x$setinverse(m)
m
}
mat2 <- makeCacheMatrix(mat)
cacheSolve(mat2)
solve(mat)
cacheSolve(mat2)
cacheSolve <- function(x, ...) {
## Input: x, output from makeCacheMatrix
m <- x$getinverse()
## If the inverse has already been computed,
## it will be retireved from cache
if(!is.null(m)) {
message("getting cached data")
## Returns the inverse of the matrix
return(m)
}
## if not in cache, the inverse will be computed
mat <- x$get()
m <- solve(mat, ...)
## if computed, the value of the inverse will be
## stored in the cache
x$setinverse(m)
## Returns the inverse of the matrix
m
}
## The following pair of functions compute and cace the
## inverse of a matrix. Considering that the supplied matrix
## is always invertible
## Creates a special "matrix" object that can cache its inverse
## Considering that the provided matrix is always invertible
makeCacheMatrix <- function(x = matrix()) {
##Input: x, square invertible matrix
m <- NULL
set <- function(y) {
x <<- y
m <<- NULL
}
get <- function() x
setinverse <- function(solve) m <<- solve
getinverse <- function() m
list(set = set, get = get,
setinverse = setinverse,
getinverse = getinverse)
#Returns list containing funcions to
##  1. Get the matrix
##  2. Set the matrix
##  3. Get the inverse
##  4. Set the inverse
}
mat2 <- makeCacheMatrix(mat)
cacheSolve(mat2)
cacheSolve(mat2)
